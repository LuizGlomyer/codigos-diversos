yarn init // inicia repositório e o arquivo package.json, que guarda as informações de dependências do projeto
yarn add @babel/cli // dependência para trabalharmos com a linha de comando do babel
yarn add @babel/preset-env // se adapta ao ambiente de desenvolvimento, se é web, mobile
yarn add pacote -D // coloca automaticamente no devDependencies

criamos um arquivo .babelrc para configurar o babel, que converte funcionalidades do ecmascript para JS puro
modelo
{
    "presets": ["@babel/preset-env"]
}

no packages.json:
"scripts": {
    "dev": "babel ./main.js -o ./bundle.js" // -w para modo watch, que monitora o arquivo para atualizar automaticamente
  }  // basicamente configura o script dev, que roda o comando babel acima. Para rodar, usamos yarn dev

"dependencies" {} // todos os pacotes yarn add vêm parar aqui
"devDependencies" {} // dependencies devem ser apenas os pacotes que são dependencias diretas da aplicação, e não pacotes para auxílio no desenvolvimento. Estes devem ficar aqui







yarn add webpack webpack-cli -D
no webpack.config.js
yarn add babel-loader -D
module.exports = {
    entry: './main.js',
    output: {
        path: __dirname,
        filename: 'bundle.js'
    },
    module: {
        rules: [
            {
                test:/\.js$/,
                exclude: /node_modules/,
                use: {
                    loader: 'babel-loader',
                }
            }
        ],
    }
};

atualizar packages.json
"scripts": {
    "dev": "webpack --mode=development"
  }
